{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/message/sendMessageToChat": {
      "post": {
        "operationId": "MessageController_sendMessage",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/message/getMessagesByEventId": {
      "get": {
        "operationId": "MessageController_getMessagesByEventId",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenDto"
                }
              }
            }
          }
        },
        "tags": ["Authentication"],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const response = await fetch('http://localhost:3333/auth/signup', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      email: 'string',\n      username: 'string',\n      password: 'string',\n      name: 'string'\n    })\n  }\n);\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    },
    "/auth/signin": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenDtoWithUserId"
                }
              }
            }
          }
        },
        "tags": ["Authentication"],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const response = await fetch('http://localhost:3333/auth/signin', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      username: 'string',\n      password: 'string'\n    })\n  }\n);\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["Authentication"],
        "security": [
          {
            "bearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const response = await fetch('http://localhost:3333/auth/logout', {\n    method: 'POST',\n    headers: {\n      Authorization: 'Bearer <YOUR_JWT_HERE>'\n    }\n  }\n);\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "operationId": "AuthController_refresh",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnAuthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcessDeniedResponse"
                }
              }
            }
          }
        },
        "tags": ["Authentication"],
        "security": [
          {
            "bearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const response = await fetch('http://localhost:3333/auth/refresh', {\n    method: 'POST',\n    headers: {\n      Authorization: 'Bearer <YOUR_JWT_HERE>'\n    }\n  }\n);\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    },
    "/auth/me": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFromJwtDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": ["Authentication"],
        "security": [
          {
            "bearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const response = await fetch('http://localhost:3333/auth/me', {\n    method: 'GET',\n    headers: {\n      Authorization: 'Bearer <YOUR_JWT_HERE>'\n    }\n  }\n);\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    },
    "/user": {
      "get": {
        "operationId": "UserController_getAllUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRespondDto"
                  }
                }
              }
            }
          }
        },
        "tags": ["User"],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const response = await fetch('http://localhost:3333/user',\n  {method: 'GET'}\n );\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    },
    "/user/{username}": {
      "get": {
        "operationId": "UserController_getUser",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRespondDto"
                }
              }
            }
          }
        },
        "tags": ["User"],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const username = 'YOUR_username_PARAMETER';\n  const response = await fetch(`http://localhost:3333/user/${username}`,\n  {method: 'GET'}\n );\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    },
    "/user/update/profile": {
      "post": {
        "operationId": "UserController_updateUserProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": ["User"]
      }
    },
    "/event/createEvent": {
      "post": {
        "operationId": "EventController_createEvent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEventDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event records ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEventResponseDto"
                }
              }
            }
          }
        },
        "tags": ["Event"],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const response = await fetch('http://localhost:3333/event/createEvent', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      eventName: 'string',\n      description: 'string'\n      location: 'string'\n      date: 'string'\n          creatorUsername: 'string'\n    })\n  }\n);\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    },
    "/event/addParticipant": {
      "post": {
        "operationId": "EventController_addParticipant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddParticipantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event records by id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDto"
                }
              }
            }
          }
        },
        "tags": ["Event"],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const response = await fetch('http://localhost:3333/event/addParticipant', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      eventId: 'string',\n      useername: 'string'\n    })\n  }\n);\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    },
    "/event/removeParticipant": {
      "post": {
        "operationId": "EventController_removeParticipant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveParticipantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event records by id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDto"
                }
              }
            }
          }
        },
        "tags": ["Event"],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const response = await fetch('http://localhost:3333/event/removeParticipant', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      eventId: 'string',\n      useername: 'string'\n    })\n  }\n);\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    },
    "/event/getEvent/{eventId}": {
      "get": {
        "operationId": "EventController_getEvent",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event records by id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventByIdDto"
                }
              }
            }
          }
        },
        "tags": ["Event"],
        "x-codeSamples": [
          {
            "lang": "JavaScript",
            "label": "Node.js",
            "source": "\nimport fetch from 'node-fetch';\n\nasync function run() {\n  const username = 'YOUR_eventId_PARAMETER';\n  const response = await fetch(`http://localhost:3333/user/${username}`,\n  {method: 'GET'}\n );\n  const json = await response.json();\n  console.log(json);\n}\n\nrun();"
          }
        ]
      }
    }
  },
  "info": {
    "title": "REST Endpont Doc",
    "description": "All avarable REST endpoints",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "api",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "SignUpDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["username", "password", "email", "name"]
      },
      "TokenDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        },
        "required": ["access_token", "refresh_token"]
      },
      "SignInRequestDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["username", "password"]
      },
      "TokenDtoWithUserId": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          }
        },
        "required": ["access_token", "refresh_token", "userId"]
      },
      "UnAuthorizedResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "statusCode": {
            "type": "number"
          }
        },
        "required": ["message", "statusCode"]
      },
      "AcessDeniedResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "statusCode": {
            "type": "number"
          },
          "error": {
            "type": "string"
          }
        },
        "required": ["message", "statusCode", "error"]
      },
      "UserFromJwtDto": {
        "type": "object",
        "properties": {
          "sub": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "iat": {
            "type": "number"
          },
          "exp": {
            "type": "number"
          }
        },
        "required": ["sub", "userId", "iat", "exp"]
      },
      "UserRespondDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": ["id", "createdAt", "updatedAt", "username", "email"]
      },
      "UserUpdateProfileDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "surname": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          }
        },
        "required": ["username", "name", "surname", "bio"]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "eventsJoined": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "username",
          "email",
          "eventsJoined"
        ]
      },
      "CreateEventDto": {
        "type": "object",
        "properties": {
          "eventName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "creatorUsername": {
            "type": "string"
          }
        },
        "required": [
          "eventName",
          "description",
          "location",
          "date",
          "creatorUsername"
        ]
      },
      "EventDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "creatorId": {
            "type": "string"
          },
          "participantsId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "date",
          "location",
          "description",
          "creatorId",
          "participantsId"
        ]
      },
      "EventChatDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "eventId": {
            "type": "string"
          }
        },
        "required": ["id", "updatedAt", "eventId"]
      },
      "CreateEventResponseDto": {
        "type": "object",
        "properties": {
          "event": {
            "$ref": "#/components/schemas/EventDto"
          },
          "eventChat": {
            "$ref": "#/components/schemas/EventChatDto"
          }
        },
        "required": ["event", "eventChat"]
      },
      "AddParticipantDto": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": ["eventId", "username"]
      },
      "RemoveParticipantDto": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": ["eventId", "username"]
      },
      "GetEventByIdDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "creatorId": {
            "type": "string"
          },
          "participantsId": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creator": {
            "$ref": "#/components/schemas/UserDto"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            }
          },
          "eventChat": {
            "$ref": "#/components/schemas/EventChatDto"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "date",
          "location",
          "description",
          "creatorId",
          "participantsId",
          "creator",
          "participants",
          "eventChat"
        ]
      }
    }
  }
}
