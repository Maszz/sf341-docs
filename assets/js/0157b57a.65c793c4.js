"use strict";(self.webpackChunksf341_docs=self.webpackChunksf341_docs||[]).push([[2909],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),m=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=m(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(n),u=a,N=d["".concat(i,".").concat(u)]||d[u]||p[u]||o;return n?r.createElement(N,s(s({ref:t},c),{},{components:n})):r.createElement(N,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var m=2;m<o;m++)s[m]=n[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5629:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2,hide_table_of_contents:!0},s=void 0,l={unversionedId:"Developments",id:"Developments",title:"Developments",description:"How to use development server",source:"@site/docs/Developments.mdx",sourceDirName:".",slug:"/Developments",permalink:"/sf341-docs/docs/Developments",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Developments.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"Tutorial Intro",permalink:"/sf341-docs/docs/intro"},next:{title:"Graphql - Docs",permalink:"/sf341-docs/docs/category/graphql---docs"}},i={},m=[{value:"How to use development server",id:"how-to-use-development-server",level:2},{value:"Components in compose",id:"components-in-compose",level:2},{value:"Prisma ORM Command ()",id:"prisma-orm-command-",level:2},{value:"What Prisma migration do .",id:"what-prisma-migration-do-",level:2},{value:"\u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e44\u0e23\u0e17\u0e31\u0e01\u0e40\u0e1f\u0e2a\u0e1a\u0e38\u0e04 \u0e02\u0e2d\u0e1a\u0e04\u0e38\u0e13",id:"\u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e44\u0e23\u0e17\u0e31\u0e01\u0e40\u0e1f\u0e2a\u0e1a\u0e38\u0e04-\u0e02\u0e2d\u0e1a\u0e04\u0e38\u0e13",level:2}],c={toc:m};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"how-to-use-development-server"},"How to use development server"),(0,a.kt)("p",null,"Install Docker "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# pull image\n$ docker pull bitnami/redis:latest\n$ docker pull bitnami/mysql:latest\n")),(0,a.kt)("p",null,"Finally run dev compose to expose database and cache server to localhost"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# compose up\n$ docker compose -f dev-compose.yml up\n# compose down for stop server\n$ docker compose -f dev-compose.yml down\n# docker compose up command use -d at the end for run it on background.\n")),(0,a.kt)("h2",{id:"components-in-compose"},"Components in compose"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Redis master 1 instance -> expose port 5665 to localhost"),(0,a.kt)("li",{parentName:"ul"},"mysql master 1 instance -> expose port 6381 to localhost"),(0,a.kt)("li",{parentName:"ul"},"Redis slave"),(0,a.kt)("li",{parentName:"ul"},"mysql slave")),(0,a.kt)("p",null,"technically dev server load .env that preconfig for development server.\nno need to addition config for development server."),(0,a.kt)("p",null,"then wait a bit to docker compose to initialize... "),(0,a.kt)("p",null,"first migrate schema to db table use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# This command do db operation for sync and create table to match schema. \n$ npx prisma migrate dev -n init \n")),(0,a.kt)("p",null,"then open backend dev server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# run backend server\n$ yarn start:dev\n# or\n$ npm run start:dev\n")),(0,a.kt)("h2",{id:"prisma-orm-command-"},"Prisma ORM Command ()"),(0,a.kt)("p",null,"additional command for automatic interact with databse database"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# when change prisma schema run this command to sync schema to db \n$ npx prisma migrate dev -n <name>\n# this command will hard reset the database (all data will be deleted), then do all migration apply.\n$ npx prisma migrate reset \n# deploy \n$ npx prisma migrate deploy \n")),(0,a.kt)("h2",{id:"what-prisma-migration-do-"},"What Prisma migration do ."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- CreateTable\nCREATE TABLE `Message` (\n    `sender_id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n    `senderName` VARCHAR(191) NOT NULL,\n    `message` VARCHAR(191) NOT NULL,\n    `date` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n\n    PRIMARY KEY (`sender_id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- CreateTable\nCREATE TABLE `Log` (\n    `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n    `level` VARCHAR(191) NOT NULL,\n    `message` VARCHAR(191) NOT NULL,\n    `context` VARCHAR(191) NOT NULL,\n    `timestamp` DATE NOT NULL,\n\n    INDEX `timestamp_1`(`timestamp`),\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- CreateTable\nCREATE TABLE `User` (\n    `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n    `createdAt` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n    `updatedAt` DATETIME(3) NOT NULL,\n    `username` VARCHAR(191) NOT NULL,\n    `name` VARCHAR(191) NOT NULL,\n    `email` VARCHAR(191) NOT NULL,\n    `hashpw` VARCHAR(1000) NOT NULL,\n    `hashedRt` VARCHAR(1000) NULL,\n\n    UNIQUE INDEX `User_username_key`(`username`),\n    UNIQUE INDEX `User_email_key`(`email`),\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n")),(0,a.kt)("h2",{id:"\u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e44\u0e23\u0e17\u0e31\u0e01\u0e40\u0e1f\u0e2a\u0e1a\u0e38\u0e04-\u0e02\u0e2d\u0e1a\u0e04\u0e38\u0e13"},"\u0e21\u0e35\u0e1b\u0e31\u0e0d\u0e2b\u0e32\u0e44\u0e23\u0e17\u0e31\u0e01\u0e40\u0e1f\u0e2a\u0e1a\u0e38\u0e04 \u0e02\u0e2d\u0e1a\u0e04\u0e38\u0e13"))}p.isMDXComponent=!0}}]);